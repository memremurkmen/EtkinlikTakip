@using EntityLayer.Concrete
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@{
    ViewData["Title"] = "AllActivities";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <p>
        <h3>Tüm Etkinlikler</h3>
    </p>

    @(Html.Kendo().Grid<ActivityViewModel>()
    .Name("Grid")
    .Columns(columns =>
    {
    columns.Bound(c => c.Activity.Image).ClientTemplate("#if(Activity.Image != null){#" +
    "<img class='ImgTemplate' src='/images/#= Activity.Image #' alt='#= Activity.Title #' Title='#= Activity.Title #' height='62' width='62'/>#}#");
    columns.Bound(c => c.Activity.Title).Title("Başlık");
    columns.Bound(c => c.Activity.Description).Title("Açıklama");
    columns.Bound(c => c.Activity.Location).Title("Lokasyon");
    columns.Bound(c => c.Activity.MaksKontenjan).Title("Kontenjan");
    columns.Bound(c => c.Activity.Start).ClientTemplate("#= kendo.toString(kendo.parseDate(Activity.Start), 'dd/MM/yyyy HH:mm:ss') #").Title("Başlangıç");
    columns.Bound(c => c.Activity.End).ClientTemplate("#= kendo.toString(kendo.parseDate(Activity.End), 'dd/MM/yyyy HH:mm:ss') #").Title("Bitiş");
    columns.Bound(c => c.Activity.IsConfirmed).Title("Onay").ClientTemplate("<span id='badge_#=ActivityID#' class='badgeTemplate'></span>");
    columns.Command(command => {
    command.Edit();
    if (HttpContextAccessor.HttpContext.Session.GetString("userRole") == "Admin")
    {
    command.Custom("Onayla").IconClass("k-icon k-i-check").Click("confirmActivity");
    }
    command.Custom("Sil").IconClass("k-icon k-i-close").Click("deleteActivity");
    }).Width(230);
    })
    .Editable(editable => editable.Mode(GridEditMode.PopUp))
    .Events(events => {
    events.DataBound("onActivityDataBound");
    })
    .ToolBar(t => t.Search().Text("Ara"))
    .Search(s => {
    s.Field(o => o.Activity.Title, "contains");
    s.Field(o => o.Activity.Description, "contains");
    s.Field(o => o.Activity.Location, "contains");
    })
    .Pageable(p => {
    p.Refresh(true);
    p.PageSizes(true);
    })
    .Sortable(true)
    .Filterable()
    .ClientDetailTemplateId("template")
    .DataSource(dataSource => dataSource
    .Ajax()
    .PageSize(10)
    .Model(model =>
    {
    model.Id(p => p.Activity.ID);
    model.Field(p => p.Activity.Image).Editable(false);
    model.Field(p => p.Activity.Title).Editable(true);
    model.Field(p => p.Activity.Description).Editable(true);
    model.Field(p => p.Activity.Start).Editable(true);
    model.Field(p => p.Activity.End).Editable(true);
    model.Field(p => p.Activity.IsConfirmed).Editable(false);
    })
    .Read(read => read.Action("ReadActivity", "ActivityManage"))
    .Update(update => update.Action("UpdateActivity", "ActivityManage"))
    .ServerOperation(false)
    )
    )
</div>
<script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().TabStrip()
          .Name("tabStrip_#=ActivityID#")
          .SelectedIndex(0)
          .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
          .Items(items =>
          {
            items.Add().Text("Etkinlik Detayı").Content(
             "<div class='activity-details'>" +
                 "<ul>" +
                     "<li><label><strong>Başlık:</strong></label> #= Activity.Title #</li>" +
                     "<li><label><strong>Açıklama:</strong></label> #= Activity.Description #</li>" +
                     "<li><label><strong>Lokasyon:</strong></label> #= Activity.Location #</li>" +
                     "<li><label><strong>Kontenjan:</strong></label> #= Activity.MaksKontenjan #</li>" +
                     "<li><label><strong>Başlangıç Tarihi:</strong></label> #= kendo.toString(kendo.parseDate(Activity.Start), 'dd/MM/yyyy HH:mm') #</li>" +
                     "<li><label><strong>Bitiş Tarihi:</strong></label> #= kendo.toString(kendo.parseDate(Activity.End), 'dd/MM/yyyy HH:mm') #</li>" +
                     "#if(Activity.IsConfirmed == true){#" +
                     "<li><label><strong>Onaylayan Kullanıcı:</strong></label> #= Activity.ConfirmedUser.UserName #</li>" +
                     "<li><label><strong>Onaylanma Tarihi:</strong></label> #= kendo.toString(kendo.parseDate(Activity.ConfirmedTime), 'dd/MM/yyyy HH:mm:ss') #</li>#}#" +
                     "<li><label><strong>Oluşturan Kullanıcı:</strong></label> #= Activity.CreatedUser.UserName #</li>" +
                     "<li><label><strong>Oluşturulma Tarihi:</strong></label> #= kendo.toString(kendo.parseDate(Activity.CreatedTime), 'dd/MM/yyyy HH:mm:ss') #</li>" +
                     "#if(Activity.UpdatedBy != null){#" +
                     "<li><label><strong>Son Güncelleyen Kullanıcı:</strong></label> #= Activity.UpdatedUser.UserName #</li>" +
                     "<li><label><strong>Son Güncellenme Tarihi:</strong></label> #= kendo.toString(kendo.parseDate(Activity.UpdatedTime), 'dd/MM/yyyy HH:mm:ss') #</li>#}#" +
                 "</ul>" +
             "</div>"
         );
            items.Add().Text("Davetliler").Content(@<text>
                                    @(Html.Kendo().Grid<ActivityInvite>()
                    .Name("grid_#=ActivityID#")
                    .Columns(columns =>
                    {
                        columns.Bound(o => o.InvitedUser.UserName).Title("Davetli");
                        columns.Bound(o => o.IsConfirmed).Title("Onay").ClientTemplate("<span class='badgeTemplate'></span>");
                        columns.Bound(o => o.AIConfirmedUser.UserName).Title("Onaylayan Kullanıcı");
                        columns.Bound(o => o.AICreatedUser.UserName).Title("Daveti Oluşturan Kullanıcı");
                        columns.Command(command => {
                            command.Custom("Davetli Sil").IconClass("k-icon k-i-close").Click("deleteInvitedUser");
                            }).Width(50);
                    })
                    .Events(events => {
                        events.DataBound("onUserDataBound");
                    })
                    .ToolBar(t => t.Search().Text("Ara"))
                    .Search(s => {
                        s.Field(o => o.InvitedUser.UserName, "contains");
                    })
                    .Pageable(p => {
                        p.Refresh(true);
                        p.PageSizes(true);
                    })
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(5)
                        .Read(read => read.Action("GetActivityInvitees", "ActivityManage", new{ activityId = "#=ActivityID#" }))
                    )
                    .Sortable()
                    .ToClientTemplate())</text>);
    }).ToClientTemplate())
</script>
<script>
    function onActivityDataBound(e) {
        var grid = this;
        grid.table.find("tr").each(function() {
            var dataItem = grid.dataItem(this);
            if (dataItem != null) {
                var themeColor = dataItem.Activity.IsConfirmed ? 'success' : 'error';
                var text = dataItem.Activity.IsConfirmed ? 'Onaylandı' : 'Onaylanmadı';

                $(this).find('script').each(function() {
                    eval($(this).html());
                });

                $(this).find(".badgeTemplate").kendoBadge({
                    themeColor: themeColor,
                    text: text,
                });

                kendo.bind($(this), dataItem);
            }
        });
    }
    function onUserDataBound(e) {
        var grid = this;
        grid.table.find("tr").each(function() {
            var dataItem = grid.dataItem(this);
            if (dataItem != null) {
                var themeColor = dataItem.IsConfirmed ? 'success' : 'error';
                var text = dataItem.IsConfirmed ? 'Onaylandı' : 'Onaylanmadı';

                $(this).find('script').each(function() {
                    eval($(this).html());
                });

                $(this).find(".badgeTemplate").kendoBadge({
                    themeColor: themeColor,
                    text: text,
                });

                kendo.bind($(this), dataItem);
            }
        });
    }


    function confirmActivity(e) {
        var model = this.dataItem($(e.currentTarget).closest("tr"));
        var dataItem = this.dataItem(this);
        if (!model.Activity.IsConfirmed) {
            swal({
                title: 'Emin misiniz?',
                text: "Etkinliği onaylamak istediğinize emin misiniz?",
                icon: 'warning',
                buttons: {
                    cancel: {
                        text: "İptal",
                        value: false,
                        visible: true,
                        closeModal: true,
                        className: "",
                    },
                    confirm: {
                        text: "Onayla",
                        value: true,
                        visible: true,
                        className: "",
                        closeModal: true
                    }
                }
            }).then(function(value) {
                if (value) {
                    $.ajax({
                        url: "@Url.Action("ConfirmActivity", "ActivityManage")",
                        type: 'POST',
                        data: { 'activityId': model.Activity.ID },
                        success: function(response) {
                            swal({
                                title: 'İşlem Tamam!',
                                text: "Etkinlik başarıyla onaylandı.",
                                icon: 'success',
                                buttons: {
                                    confirm: {
                                        text: "Tamam",
                                        value: true,
                                        visible: true,
                                        className: "",
                                        closeModal: true
                                    }
                                }
                            }).then(function() {
                                location.reload();
                            })
                        },
                        error: function(response) {
                            swal(
                                'Etkinlik Onaylanamadı!',
                                'Etkinlik onaylanırken bir hata ile karşılaşıldı.',
                                'error'
                            )
                        }
                    });
                }
                else {
                    swal(
                        'İptal Edildi!',
                        'Etkinlik onaylanmadı.',
                        'error'
                    )
                }
            })
        }
    }

    function deleteActivity(e) {
        var model = this.dataItem($(e.currentTarget).closest("tr"));
        if (!model.Activity.IsDeleted) {
            swal({
                title: 'Emin misiniz?',
                text: "Etkinliği silmek istediğinize emin misiniz?",
                icon: 'warning',
                buttons: {
                    cancel: {
                        text: "İptal",
                        value: false,
                        visible: true,
                        closeModal: true,
                        className: "",
                    },
                    confirm: {
                        text: "Sil",
                        value: true,
                        visible: true,
                        className: "",
                        closeModal: true
                    }
                }
            }).then(function(value) {
                if (value) {
                    $.ajax({
                        url: "@Url.Action("DeleteActivity", "ActivityManage")",
                        type: 'POST',
                        data: { 'activityId': model.Activity.ID },
                        success: function(response) {
                            swal({
                                title: 'İşlem Tamam!',
                                text: "Etkinlik başarıyla silindi.",
                                icon: 'success',
                                buttons: {
                                    confirm: {
                                        text: "Tamam",
                                        value: true,
                                        visible: true,
                                        className: "",
                                        closeModal: true
                                    }
                                }
                            }).then(function() {
                                location.reload();
                            })
                        },
                        error: function(response) {
                            swal(
                                'Etkinlik Silinemedi!',
                                'Etkinlik silinirken bir hata ile karşılaşıldı.',
                                'error'
                            )
                        }
                    });
                }
                else {
                    swal(
                        'İptal Edildi!',
                        'Etkinlik silinmedi.',
                        'error'
                    )
                }
            })
        }
    }

    function deleteInvitedUser(e) {
        var model = this.dataItem($(e.currentTarget).closest("tr"));
        swal({
            title: 'Emin misiniz?',
            text: "Davetliyi silmek istediğinize emin misiniz?",
            icon: 'warning',
            buttons: {
                cancel: {
                    text: "İptal",
                    value: false,
                    visible: true,
                    closeModal: true,
                    className: ""
                },
                confirm: {
                    text: "Sil",
                    value: true,
                    visible: true,
                    className: "",
                    closeModal: true
                }
            }
        }).then(function(value) {
            if (value) {
                alert(model.Id);
                $.ajax({
                    url: "@Url.Action("DeleteInvitedUser", "ActivityManage")",
                    type: 'POST',
                    data: { 'invitedUserId': model.Id },
                    success: function(response) {
                        swal({
                            title: 'İşlem Tamam!',
                            text: "Davetli başarıyla silindi.",
                            icon: 'success',
                            buttons: {
                                confirm: {
                                    text: "Tamam",
                                    value: true,
                                    visible: true,
                                    className: "",
                                    closeModal: true
                                }
                            }
                        }).then(function() {
                            location.reload();
                        })
                    },
                    error: function(response) {
                        swal(
                            'Davetli Silinemedi!',
                            'Davetli silinirken bir hata ile karşılaşıldı.',
                            'error'
                        )
                    }
                });
            }
            else {
                swal(
                    'İptal Edildi!',
                    'Davetli silinmedi.',
                    'error'
                )
            }
        })
    }
</script>

<style>

    .k-grid tbody tr {
        line-height: 20px;
    }

    .k-grid tbody td {
        padding: 5px;
    }

    .k-grid .k-grid-search {
        display: flex;
        margin-left: auto;
        margin-right: 0;
    }
</style>

