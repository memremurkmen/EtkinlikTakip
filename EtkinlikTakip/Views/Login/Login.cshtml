@model EtkinlikTakip.Models.UserModel
@{
    ViewData["Title"] = "Login";
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - EtkinlikTakip</title>
    <environment names="Development">
        <link rel="stylesheet" href="~/lib/bootstrap/css/bootstrap.css" />
        <link rel="stylesheet" href="~/css/site.css" />
    </environment>
    <environment names="Staging,Production">
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css"
              asp-fallback-href="~/lib/bootstrap/css/bootstrap.min.css"
              asp-fallback-test-class="sr-only" asp-fallback-test-property="position" asp-fallback-test-value="absolute" />
        <link rel="stylesheet" href="~/css/site.min.css" asp-append-version="true" />
    </environment>
    <script src="~/js/sweetalert2@11.js"></script>
    <script src="~/js/sweetalert.min.js"></script>

</head>
<body style="background-image: url('../images/Cumhurbaskanligi-Kulliyesi.jpeg'); background-repeat:no-repeat; background-size:cover; background-position: center;">
    <section class="ftco-section" style="margin-top: 5%;">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-md-6 text-center mb-5">
                    <h2 class="heading-section" style="font-weight:bold; color:whitesmoke;">ETKİNLİK TAKİP</h2>
                </div>
            </div>
            <div class="row justify-content-center" style="margin-top:50px;">
                <div class="col-md-6 col-lg-4">
                    <div class="login-wrap p-0">
                        <div class="form-group">
                            <input type="text" asp-for="Username" id="username" class="form-control" placeholder="Kullanıcı Adı" required>
                        </div>
                        <div class="form-group">
                            <input type="password" asp-for="Password" id="password" class="form-control" placeholder="Şifre" required>
                        </div>
                        <div class="form-group">
                            <button type="button" onclick="loginBtn()" class="form-control btn btn-primary submit px-3">Giriş Yap</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <environment names="Development">
        <script src="~/lib/bootstrap/js/bootstrap.js"></script>
    </environment>
    <environment names="Staging,Production">
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js"
                asp-fallback-src="~/lib/bootstrap/js/bootstrap.min.js"
                asp-fallback-test="window.jQuery && window.jQuery.fn && window.jQuery.fn.modal"></script>
    </environment>
    <script src="~/js/site.js" asp-append-version="true"></script>

    <script>
        function loginBtn(e) {
            var username = document.getElementById("username").value;
            var password = document.getElementById("password").value;
            $.ajax({
                url: "@Url.Action("Login", "Login")",
                type: 'POST',
                data: {
                    'username': username,
                    'password': password
                },
                success: function(responseMsg) {
                    if (!responseMsg.loggedIn) {
                        const Toast = Swal.mixin({
                            toast: true,
                            position: 'bottom',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true,
                            didOpen: (toast) => {
                                toast.addEventListener('mouseenter', Swal.stopTimer)
                                toast.addEventListener('mouseleave', Swal.resumeTimer)
                            }
                        })

                        Toast.fire({
                            icon: 'warning',
                            title: 'Kullanıcı adı veya şifre hatalı.'
                        })
                    }
                    else {
                        const Toast = Swal.mixin({
                            toast: true,
                            position: 'bottom',
                            showConfirmButton: false,
                            timer: 2000,
                            timerProgressBar: true,
                            didOpen: (toast) => {
                                toast.addEventListener('mouseenter', Swal.stopTimer)
                                toast.addEventListener('mouseleave', Swal.resumeTimer)
                            }
                        })

                        Toast.fire({
                            icon: 'success',
                            title: 'Giriş başarılı.'
                        })
                        window.location.href = "Activity/Activities";
                    }
                },
                error: function(response) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Bir hata ile karşılaşıldı.'
                    })
                }
            });
        }
    </script>

</body>
</html>


